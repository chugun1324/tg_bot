import asyncio # –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ 
import logging # –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è 
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command # –æ–±—Ä–æ–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ (start ... )
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.formatting import (Bold, as_list, as_marked_section, as_key_value, HashTag)
logging.basicConfig(level=logging.INFO) # –≤–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

# –¥–ª—è –±–æ—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–º–µ—Ä
# bot = Bot(
#     token="MY_COKEN"
#     default=DefaultBotProperties(
#         ParseMode=ParseMode.HTML
#         # ....
#     )
# )

bot = Bot(token="8102064308:AAF7kIbtPD13LTxJaFMjkiljUnqE1IleDNk")

dp = Dispatcher() # –æ–±—Ä–æ–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∂–µ –∞–ø–¥–µ–π—Ç—ã 

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–ß–µ–±—É–ø–∏—Ü—Ü–∞–∞")],
        [types.KeyboardButton(text="–ù–µ —á–µ–±—É–ø–∏—Ü—Ü–∞")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–∏—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏"
        )
    await message.answer("—Ç–µ–±—è –∑–æ–≤—É—Ç ?", reply_markup=keyboard)

@dp.message(Command("test")) # –≤ –¥–µ–∫–∞—Ä–∞—Ç–æ—Ä —Å—Ç–∞–≤–∏–º –æ–±—Ä–æ–±–æ—Ç—á–∏–∫ —á–µ–≥–æ-–ª–∏–±–æ (–∫ –ø—Ä–∏–º–µ—Ä—É –∫–æ–º–∞–Ω–¥)
async def cmd_start(message: types.Message):
    await message.reply("Test 1")

async def test_2(message: types.Message):
    await message.reply("Test 2")

dp.message.register(test_2, Command("test2")) # –º–æ–∂–Ω–æ –∑–∞–Ω–æ—Å–∏—Ç—å –≤—Ä—É—á–Ω—É—é –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ 

@dp.message(Command('dice'))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")

@dp.message(Command("text"))
async def any_message(message: types.Message):
    await message.answer(
        "Hello, <b>world \n</b>" \
        f"<i>you super {message.from_user.full_name}</i>",
        parse_mode=ParseMode.HTML # –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –≤–∏–¥–µ HTML
    )
# –µ—Å—Ç—å –≤—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–æ–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∫ –ø—Ä–∏–º–µ—Ä—É —Å–ø–∏—Å–∫–∏ 
@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    content = as_list(
        as_marked_section(
            Bold("Succes: "),
            "Value 1",
            "Value 2",
            marker="‚úÖ ",
        ),
        as_marked_section (
            Bold("Failed: "),
            "Value 1",
            marker="‚ùå ",
        ),
        as_marked_section(
            Bold("SUBD: "),
            as_key_value("Total", 23),
            as_key_value("Acces", 12),
            marker=" ",
        ),
        HashTag("#list"),
        sep="\n\n",
    )
    await message.answer(**content.as_kwargs()) # —Ä–∞—Å–ø–æ–∫–æ–≤–∫–∞ —Å–ª–æ–≤–æ—Ä—è

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã 
@dp.message(Command("error"))
async def cmd_error(message: types.Message, command: Command):
    if command.arrgs is None:
        await message.answer("–ù–µ—Ç –∞—Ä–≥—É–º–Ω—Ç–∞ /?")
        return
    try:
        pass
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞")
        return
    await message.answer("–í—Å–µ –æ–∫–µ")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())